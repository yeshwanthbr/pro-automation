package nl.prowareness.automation.selenium.assertions;

import nl.prowareness.automation.selenium.webdriver.SeleniumWebDriver;

public class AssertWithScreenShot extends org.junit.Assert {
	


	public static void assertTrue(String message, boolean condition, SeleniumWebDriver driver) {
		try {
			assertTrue(message, condition);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertTrue(boolean condition, SeleniumWebDriver driver) {
		try {
			assertTrue(condition);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertFalse(String message, boolean condition, SeleniumWebDriver driver) {
		try {
			assertFalse(message, condition);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertFalse(boolean condition, SeleniumWebDriver driver) {
		try {
			assertFalse(condition);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void fail(String message, SeleniumWebDriver driver) {
		try {
			fail(message);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void fail(SeleniumWebDriver driver) {
		try {
			fail();
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(String message, Object expected, Object actual, SeleniumWebDriver driver) {
		try {
			assertEquals(message, expected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(Object expected, Object actual, SeleniumWebDriver driver) {
		try {
			assertEquals(expected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotEquals(String message, Object first, Object second, SeleniumWebDriver driver) {
		try {
			assertNotEquals(message, first, second);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotEquals(Object first, Object second, SeleniumWebDriver driver) {
		try {
			assertNotEquals(first, second);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotEquals(String message, long first, long second, SeleniumWebDriver driver) {
		try {
			assertNotEquals(message, first, second);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotEquals(long first, long second, SeleniumWebDriver driver) {
		try {
			assertNotEquals(first, second);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotEquals(String message, double first, double second, double delta,
			SeleniumWebDriver driver) {
		try {
			assertNotEquals(message, first, second, delta);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotEquals(double first, double second, double delta, SeleniumWebDriver driver) {
		try {
			assertNotEquals(first, second, delta);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(String message, double expected, double actual, double delta,
			SeleniumWebDriver driver) {
		try {
			assertEquals(message, expected, actual, delta);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(String message, float expected, float actual, float delta,
			SeleniumWebDriver driver) {
		try {
			assertEquals(message, expected, actual, delta);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(long expected, long actual, SeleniumWebDriver driver) {
		try {
			assertEquals(expected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(String message, long expected, long actual, SeleniumWebDriver driver) {
		try {
			assertEquals(message, expected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(double expected, double actual, double delta, SeleniumWebDriver driver) {
		try {
			assertEquals(expected, actual, delta);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertEquals(float expected, float actual, float delta, SeleniumWebDriver driver) {
		try {
			assertEquals(expected, actual, delta);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotNull(String message, Object object, SeleniumWebDriver driver) {
		try {
			assertNotNull(message, object);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotNull(Object object, SeleniumWebDriver driver) {
		try {
			assertNotNull(object);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNull(String message, Object object, SeleniumWebDriver driver) {
		try {
			assertNull(message, object);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNull(Object object, SeleniumWebDriver driver) {
		try {
			assertNull(object);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertSame(String message, Object expected, Object actual, SeleniumWebDriver driver) {
		try {
			assertSame(message, expected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertSame(Object expected, Object actual, SeleniumWebDriver driver) {
		try {
			assertSame(expected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotSame(String message, Object unexpected, Object actual, SeleniumWebDriver driver) {
		try {
			assertNotSame(message, unexpected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}

	public static void assertNotSame(Object unexpected, Object actual, SeleniumWebDriver driver) {
		try {
			assertNotSame(unexpected, actual);
		} catch (AssertionError e) {
			driver.captureScreenshot();
			throw e;
		}
	}


	
	
}
